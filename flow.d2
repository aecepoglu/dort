e2e flow via Dispatcher: {
shape: sequence_diagram

p1.shape: Person
p2.shape: Person
TCPServer
Dispatcher
GameServer
Matchmaking
Fight

connection: {
	p1 -> TCPServer: connect
}

identification: {
	p1 -> TCPServer: authenticate 
	TCPServer -> GameServer.regp1: register "p1"
	GameServer.regp1 -> Dispatcher: sub "p1"
}

joining matchmaking queue: {
	p1 -> TCPServer: matchmake
	TCPServer -> Dispatcher: dispatch "matchmake"\nto "p1"
	Dispatcher -> GameServer: "'matchmake'\nfrom p1"
	GameServer -> Matchmaking: enqueue p1
	Matchmaking -> GameServer: returns "enqueued"
}

finding a matchup: {
	p2 -> TCPServer: matchmake
	TCPServer -> Dispatcher: dispatch "matchmake"\nto "p2"
	Dispatcher -> GameServer.2: "'matchmake' from p2"
	GameServer.2 -> Matchmaking: enqueue p2
	Matchmaking -> GameServer.2: returns "found matchup\np1, p2"
	GameServer.2 -> Dispatcher: unsub\n\["p1", "p2"\]
	GameServer.2 -> Fight: "create(p1, p2)"
	Fight -> Dispatcher: "sub [p1, p2]"
	GameServer.2 -> p1: found opponent p2
	GameServer.2 -> p2: found opponent p1
}

someone makes a move: {
	p1 -> TCPServer -> Dispatcher -> Fight -> p2: a move
}
}
